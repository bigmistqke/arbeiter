// Generated by dts-bundle-generator v7.2.0

/**
 *  FilterObject
 *  FilterObject filters the entries of an object (generic 1) according to a type (generic 2)
 *  FilterObject can invert the selection (generic 3)
 */
export type PickKeysByValueType<T, TYPE, INVERT extends boolean> = INVERT extends true ? {
	[K in keyof T]: T[K] extends TYPE ? never : K;
}[keyof T] : {
	[K in keyof T]: T[K] extends TYPE ? K : never;
}[keyof T];
export type FilterObject<T, TYPE, INVERT extends boolean = false> = Pick<T, PickKeysByValueType<T, TYPE, INVERT>>;
export type StateCallback<STATE> = () => {
	[K in keyof STATE]: STATE[K];
};
export type Promisify<T extends {
	[key: string]: any;
}> = {
	[K in keyof T]: (...args: Parameters<T[K]>) => Promise<ReturnType<T[K]>>;
};
export type FilterFunction<T> = FilterObject<T, Function>;
export default class Werker<STATE> {
	methods: Promisify<FilterFunction<STATE>>;
	private worker;
	private messageId;
	private responseQueue;
	constructor(m: StateCallback<STATE>);
	terminate(): void;
	private getMethods;
	private onmessage;
	private getWorkerString;
	private getWorker;
}

export {};
